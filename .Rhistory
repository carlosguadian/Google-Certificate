install.packages('palmerpenguins')
library('palmerpenguins')
library('ggplot2')
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) + geom_point()
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) + geom_point(color='purple')
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) + geom_point(aes(color=species)
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species))
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species))
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species, shape=species))
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species, shape=species)) + facet_wrap(~species)
ggplot(data=penguins, aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species, shape=species)) + facet_wrap(~species) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length')
citation()
4+5
3-5
2/8
library(tidyverse)
ggplot(data=penguins,aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point(aes(color=island,shape=species))+facet_wrap(~species)
#Numérico
c(2.5, 48.5, 101.5)
#Enteros
c(1L, 5L, 15L)
#Caracteres
c("Sara" , "Lisa" , "Anna")
#Lógico
c(TRUE, FALSE, TRUE)
typeof(c(“a” , “b”))
typeof(c("a" , “b"))
typeof(c("a", "b"))
#Si lo hemos asignado a una variable con class()
a <- c("a", "b")
class(a)
#Se puede determinar el largo de un vector con length()
x <- c(33.5, 57.75, 120.05)
length(x)
x <- c(2L, 5L, 11L)
is.integer(x)
x <- c(1, 3, 5)
names(x) <- c("a", "b", "c")
x
# Se generan con list()
list("a", 1L, 1.5, TRUE)
# Y pueden contener otras listas
list(list(list(1 , 3, 5)))
#Para determinar la estructura de una lista usamos str()
str(list("a", 1L, 1.5, TRUE))
# Como a la variable a la que hayamos asignado la lista
z <- list(list(list(1 , 3, 5)))
str(z)
# Se puede poner nombre a los elementos de la lista cuando se crea
list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
library(tidyverse)
library(lubridate)
#Para obtener la fecha actual utilizamos today()
today()
#Para fecha y hora usamos now()
now()
# Para convertir a fecha de una cadena de texto utilizamos
# ymd si la estructura de la fecha es año, mes, día
ymd("2021-01-20")
# dmy si la estructura es día, mes, año
dmy("07-09-2021")
# mdy si es mes, día y año
mdy("January 20th, 2021")
#también funciona con números sin comillas
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
mdy_hm("01/20/2021 08:01")
#Para fecha y hora usamos now()
now()
# Podemos construir un dataframe con data.frame(), por ejemplo, con dos vectores
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
# Para crear un directorio utilizamos dir.create()
dir.create("destination_folder")
?dir.create
# ARCHIVOS
# Para crear un directorio utilizamos dir.create()
dir.create(getwd()/Week_2"destination_folder")
# Si lo queremos crear en un subdirectorio específico
dir.create(getwd()/Week_2,"destination_folder")
# Si lo queremos crear en un subdirectorio específico, primero obtenemos el path
camino <- getwd()
# Si lo queremos crear en un subdirectorio específico, primero obtenemos el path
camino <- getwd()
dir.create("destination_folder")
camino
dir.create(/Users/carlosguadian/Google-Certificate/Week_2,"destination_folder")
dir.create(/Users/carlosguadian/Google-Certificate/Week_2/,"destination_folder")
dir.create(Users/carlosguadian/Google-Certificate/Week_2/,"destination_folder")
dir.create("Week_2","destination_folder")
dir.create("Week_2/","destination_folder")
dir.create("/Week_2/","destination_folder")
dir.create("Google-Certificate/Week_2","destination_folder")
old.dir <- getwd()
setwd("Week_2")
dir.create("destination_folder")
# Para volver a fijar el working directory en el inicial
setwd(old.dir)
# Comprovamos
getwd()
setwd("Week_2")
# Los archivos que creemos estarán en Week_2
# Podemos crear un txt
file.create ("new_text_file.txt")
# Un doc
file.create ("new_word_file.docx")
# Para COPIAR ARCHIVOS usaremos file.copy() indicando el archivo a copiar y destino
file.copy (“new_text_file.txt” , “destination_folder”)
# Para COPIAR ARCHIVOS usaremos file.copy() indicando el archivo a copiar y destino
file.copy ("new_text_file.txt" , "destination_folder")
# Si lo que queremos es borrarlo usamos unlink()
unlink("new_text_file.txt","destination_folder")
# Si lo que queremos es borrarlo usamos unlink()
unlink("new_text_file.txt")
# Los archivos que creemos estarán en Week_2
# Podemos crear un txt
file.create ("new_text_file.txt")
?unlink
?file.remove
# Si lo que queremos es borrarlo usamos unlink()
unlink("new_text_file.txt", recursive = TRUE)
# Los archivos que creemos estarán en Week_2
# Podemos crear un txt
file.create ("new_text_file.txt")
# MATRICES
# Para crear una matriz utilizamos matrix()
matrix(c(3:8), nrow = 2)
# en dos columnas
matrix(c(3:8), ncol = 2)
getwd
getwd()
setwd(old.dir)
getwd()
setwd("explore_coding")
setwd("Week_2/explore_coding")
getwd()
setwd(old.dir)
setwd("Week_2/Basic_Programming")
getwd()
dir()
getwd()
setwd(old.dir)
getwd()
glimpse(penguins)
library(tidyverse)
glimpse(penguins)
?glimpse
library(tibble)
glimpse(penguins)
library(dplyr)
glimpse(penguins)
glimpse(mtcars)
library('palmerpenguins')
glimpse(penguins)
library(tidyverse)
head(diamonds)
str(diamonds)
glimpse(diamonds)
colnames(diamonds)
rename(diamonds, carat_new = carat)
rename(diamonds, carat_new = carat, cut_new = cut)
summarize(diamonds, mean_carat = mean(carat))
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
browseVignettes(“ggplot2”)
browseVignettes("ggplot2")
library(tidyverse)
tidyverse_update()
install.packages(c("backports", "BH", "BiocManager", "bit", "bit64", "bitops", "boot", "broom", "ca", "callr", "car", "carData", "class", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "DT", "e1071", "ellipsis", "english", "entropy", "erer", "fansi", "farver", "fastmap", "fastmatch", "fdth", "forcats", "foreach", "formatR", "fs", "gbm", "gdtools", "generics", "ggforce", "ggimage", "ggplot2", "ggplotify", "ggraph", "ggrepel", "ggthemes", "gh", "git2r", "glmnet", "glue", "graphlayouts", "gridGraphics", "gtools", "gtrendsR", "haven", "highr", "hms", "hrbrthemes", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ISOcodes", "iterators", "janitor", "jpeg", "jsonlite", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmtest", "lsa", "lubridate", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mgsub", "mime", "mlbench", "modelr", "modeltools", "network", "nlme", "nloptr", "NLP", "nnet", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "proxy", "proxyC", "ps", "purrr", "quanteda", "quantmod", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgexf", "rio", "rlang", "roxygen2", "rprojroot", "RSpectra", "rstudioapi", "Rttf2pt1", "rvcheck", "rversions", "rvest", "sandwich", "scales", "servr", "shape", "shiny", "slam", "sna", "SnowballC", "sp", "spacyr", "SparseM", "spatial", "spelling", "statnet.common", "stm", "stopwords", "stringi", "survival", "svs", "sys", "systemfit", "systemfonts", "syuzhet", "testthat", "text2vec", "textshape", "tibble", "tidygraph", "tidyr", "tidyselect", "tidytext", "tidyverse", "tm", "topicmodels", "tseries", "TTR", "tweenr", "udpipe", "Unicode", "usethis", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("nlme", "survival"))
data("ToothGrowth")
View(ToothGrowth)
# Cargamos tidyverse
library(tidyverse)
# Del paquete dplyr  para filtrar datos
filtered_tg <- filter(ToothGrowth, dose == 0.5)
View(filtered_tg)
filtered_tg
view(filtered_tg)
# Ahora vamos a ordenar el resultado
arrange(filtered_tg, len)
# Para conseguir un resultado similar vamos a utilizar un pipe
arrange(filter(ToothGrowth, dose == 0.5), len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(len)
view(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarize(mean_len = mean(len, na.rm = T), .group = "drop")
View(filtered_toothgrowth)
library(lubridate)
ymd(20200710)
myd(2020, July 10)
dmy(“7-10-2020”)
dmy("7-10-2020")
mdy("July 10th, 2020")
dmy("7-10-2020")
myd(2020, July 10)
